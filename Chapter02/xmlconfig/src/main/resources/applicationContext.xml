<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:c="http://www.springframework.org/schema/c"
       xmlns:p="http://www.springframework.org/schema/p" xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

    <!--configuration details go here-->

    <!--声明一个sgtPeppers bean-->
    <!--class指定创建bean的类，而且要使用权限定类名-->
    <!--若不指定id那么这个bean将会根据权限定类名来进行命名，soundsystem.SgtPeppers#0,
    其中#0是一个计数的形式，用来区分相同类型的其他bean，若声明了另外一个SgtPepper，并且也
    不指定id那么它自动得到的id将会是soundsystem.SgtPeppers#1
    尽管自动化的bean命名方式非常方便，但如果稍后要引用它的话，那么自动产生的名加就没有多大用处了，
    因此，通常最好的办法是借助id属性，为每个bean设置一个你自己选择的名字-->
    <bean id="sgtPeppers" class="soundsystem.SgtPeppers"></bean>

    <!--声明一个compactDist bean-->
    <bean id="compatDist" class="soundsystem.SgtPeppers"></bean>

    <!--声明cdPlayer bean-->
    <!--<constructor-arg>元素为构造器注入bean-->
    <!--<bean id="cdPlayer" class="soundsystem.CDPlayer">
        <constructor-arg ref="compatDist"/>
    </bean>-->

    <!--c命名空间为cdPlayer的构造器注入bean-->
    <!--属性名以“c:”开头，也就是命名空间的前缀；
    然后是要装配的构造器的参数名；
    之后是“-ref”这是一个命名的约定，它会告诉Spring，正在装配的是一个bean的引用
    这个bean的id是compatDist，而不是字面量“compatDist”

    c:命名空间的第二种代替方案
        c:_0-ref="compatDist"
    可以将参数名换成“0”，也就是参数列表的索引，xml中不允许数字作为属性的第一个字符，
    因此需要加上一个_为前缀
    若构造器中只有一个参数也可以用如下方案代替
        c:_-ref="compatDist"
    -->
    <bean id="cdPlayer" class="soundsystem.CDPlayer" c:cd-ref="compatDist"></bean>

    <!--constructor-arg元素-字面量形式的构造器注入-->
    <!--value属性表示将给定的值以字面量的形式注入到构造器中-->
    <!--<bean id="compactDisc" class="soundsystem.BlankDisc">
        <constructor-arg value="Sgt.Pepper's Lonely Hearts Club Band"/>
        <constructor-arg value="The Beatles"/>
    </bean>-->

    <!--c命名空间-字面量形式的构造器注入-->
    <!--第一种是采用构造器参数的名字-->
    <!--<bean id="blankDisc"
          class="soundsystem.BlankDisc"
          c:title="Sgt. Pepper's Lonely Hearts Club Band"
          c:artist="The Beatles"/>-->

    <!--第二种是采用参数索引的方式来装配,若构造器中只有一个参数的话可以省略为c:_=""-->
    <!--<bean id="blankDisc"
          class="soundsystem.BlankDisc"
          c:_0="Sgt. Pepper's Lonely Hearts Club Band"
          c:_1="The Beatles"/>-->


    <!--装配集合属性——list -->
    <!--使用list属性将其声明为一个列表，
    这里list是constructor-arg的一个子元素，这表明一个包含值的
    列表将会传递到构造器中，<value>元素用来指定列表中的每个元素,
    我们可以使用<ref>元素代替<value>元素实现引用bean装配-->
    <bean id="blankDisc" class="soundsystem.BlankDisc"
          c:_0="Sgt. Pepper's Lonely Hearts Club Band"
          c:_1="The Beatles">
        <constructor-arg>
            <list>
                <value>Sgt. Pepper's Lonely Hearts Club Band</value>
                <value>With a Little Help form My Friends</value>
                <value>Lucy in the Sky with Diamonds</value>
                <value>Getting Better</value>
                <value>Fixing a Hole</value>
            </list>
        </constructor-arg>
    </bean>

    <bean id="beatlesDiscography" class="soundsystem.Discography">
        <constructor-arg value="The Beatles"/>
        <constructor-arg>
            <list>
                <ref bean="sgtPeppers"/>
                <ref bean="whiteAlbum"/>
                <ref bean="hardDaysNight"/>
                <ref bean="revolver"/>
            </list>
        </constructor-arg>
    </bean>
    <bean id="whiteAlbum" class="soundsystem.WhiteAlbum"></bean>
    <bean id="hardDaysNight" class="soundsystem.HardDaysNight"></bean>
    <bean id="revolver" class="soundsystem.Revolver"></bean>

    <!--装配集合属性——set 用法与list元素一样。-->
    <!--<set>和<list>元素的区别不大，其中最重要的不同在于当Spring创建要装配的集合时，
    所创建的时java.util.Set还是java.util.List。如果时Set的话，所有重复的值都会被
    忽略掉，存放顺序也不会得以保证。不过无论在哪种情况下，set或list都可以用来装配List、
    Set设置数组。-->
    <!--装配集合constructor-arg要优于c命名空间，c命名空间目前无法实现装配集合-->


    <!--属性注入-->
    <!--现在DVDPlayer,没有任何的构造器（除了默认的构造器），它也没有任何强依赖，
    因此可以这样声明为一个Spring bean
    <bean id="dvdPlayer" class="soundsystem.DVDPlayer"></bean>
    -->
    <!--Spring在创建bean的时候不会有任何的问题，但是在调用play()方法的时候会出现
    NullPointerException，因为我们并没有注入cd属性,但是可以通过<property>元素
    为属性注入值-->
    <!--<property元素为属性的Setter方法所提供的功能与<constructor-arg>元素为构造器所提供
    的功能是一样的。在这里它引用了ID为compatDist的bean(通过ref属性)，并将其注入到cd属性中
    （通过setCd(CompactDisc cd)方法）-->
    <!--<bean id="dvdPlayer" class="soundsystem.DVDPlayer">
        <property name="cd" ref="compatDist"/>
    </bean>-->

    <!--<property>元素的代替方案-->
    <!--使用p命名空间装配属性-->
    <!--<bean id="dvdPlayer" class="soundsystem.DVDPlayer" p:cd-ref="compatDist"></bean>-->

    <!--<property>元素注入字面量、集合-->
    <bean id="dvdPlayer" class="soundsystem.DVDPlayer">
        <property name="cd" ref="compatDist"/>
        <property name="title" value="say good by"/>
        <!--<property name="cds">
            <list>
                <value>Sgt.Pepper's Lonely Hearts Club Band</value>
                <value>With a Little Help form My Friends</value>
                <value>Lucy in the Sky with Diamonds</value>
                <value>Getting Better</value>
                <value>Fixing a Hole</value>
            </list>
        </property>-->
        <property name="cds" ref="cds"/>
    </bean>
    <!--p命名空间目前无法实现装配集合,没有便利的方式使用p命名空间来制定一个值（或bean引用）的列表
    但是，我们可以Spring提供的util命名空间中的一些功能来简化-->

    <!--Spring的util命名空间-->
    <util:list id="cds">
            <value>Sgt.Pepper's Lonely Hearts Club Band</value>
            <value>With a Little Help form My Friends</value>
            <value>Lucy in the Sky with Diamonds</value>
            <value>Getting Better</value>
            <value>Fixing a Hole</value>
    </util:list>
    
    
    



</beans>